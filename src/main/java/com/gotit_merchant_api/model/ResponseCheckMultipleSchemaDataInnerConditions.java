/*
 * Merchant APIs
 * Technical document APIs for Merchant APIs
 *
 * The version of the OpenAPI document: 6.0
 * Contact: duong.vu@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gotit_merchant_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.gotit_merchant_api.JSON;

/**
 * Include information involve with voucher type is conditional
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-30T16:00:27.551247+07:00[Asia/Ho_Chi_Minh]", comments = "Generator version: 7.12.0")
public class ResponseCheckMultipleSchemaDataInnerConditions {
  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private String startDate;

  public static final String SERIALIZED_NAME_EXCLUDE_SPECIFIC_DATE = "exclude_specific_date";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_SPECIFIC_DATE)
  @javax.annotation.Nullable
  private List<String> excludeSpecificDate = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDE_RECURRING_DAY = "exclude_recurring_day";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_RECURRING_DAY)
  @javax.annotation.Nullable
  private List<String> excludeRecurringDay = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_VALUE = "order_value";
  @SerializedName(SERIALIZED_NAME_ORDER_VALUE)
  @javax.annotation.Nullable
  private Integer orderValue;

  public static final String SERIALIZED_NAME_REDEEMABLE_SKUS = "redeemable_skus";
  @SerializedName(SERIALIZED_NAME_REDEEMABLE_SKUS)
  @javax.annotation.Nullable
  private List<String> redeemableSkus = new ArrayList<>();

  public ResponseCheckMultipleSchemaDataInnerConditions() {
  }

  public ResponseCheckMultipleSchemaDataInnerConditions startDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Promo start date (YYYY-MM-DD)
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
  }


  public ResponseCheckMultipleSchemaDataInnerConditions excludeSpecificDate(@javax.annotation.Nullable List<String> excludeSpecificDate) {
    this.excludeSpecificDate = excludeSpecificDate;
    return this;
  }

  public ResponseCheckMultipleSchemaDataInnerConditions addExcludeSpecificDateItem(String excludeSpecificDateItem) {
    if (this.excludeSpecificDate == null) {
      this.excludeSpecificDate = new ArrayList<>();
    }
    this.excludeSpecificDate.add(excludeSpecificDateItem);
    return this;
  }

  /**
   * Promo non-effective dates (YYYY-MM-DD)
   * @return excludeSpecificDate
   */
  @javax.annotation.Nullable
  public List<String> getExcludeSpecificDate() {
    return excludeSpecificDate;
  }

  public void setExcludeSpecificDate(@javax.annotation.Nullable List<String> excludeSpecificDate) {
    this.excludeSpecificDate = excludeSpecificDate;
  }


  public ResponseCheckMultipleSchemaDataInnerConditions excludeRecurringDay(@javax.annotation.Nullable List<String> excludeRecurringDay) {
    this.excludeRecurringDay = excludeRecurringDay;
    return this;
  }

  public ResponseCheckMultipleSchemaDataInnerConditions addExcludeRecurringDayItem(String excludeRecurringDayItem) {
    if (this.excludeRecurringDay == null) {
      this.excludeRecurringDay = new ArrayList<>();
    }
    this.excludeRecurringDay.add(excludeRecurringDayItem);
    return this;
  }

  /**
   * Promo non-effective day of week
   * @return excludeRecurringDay
   */
  @javax.annotation.Nullable
  public List<String> getExcludeRecurringDay() {
    return excludeRecurringDay;
  }

  public void setExcludeRecurringDay(@javax.annotation.Nullable List<String> excludeRecurringDay) {
    this.excludeRecurringDay = excludeRecurringDay;
  }


  public ResponseCheckMultipleSchemaDataInnerConditions orderValue(@javax.annotation.Nullable Integer orderValue) {
    this.orderValue = orderValue;
    return this;
  }

  /**
   * Order value of voucher type &#x3D; conditional
   * @return orderValue
   */
  @javax.annotation.Nullable
  public Integer getOrderValue() {
    return orderValue;
  }

  public void setOrderValue(@javax.annotation.Nullable Integer orderValue) {
    this.orderValue = orderValue;
  }


  public ResponseCheckMultipleSchemaDataInnerConditions redeemableSkus(@javax.annotation.Nullable List<String> redeemableSkus) {
    this.redeemableSkus = redeemableSkus;
    return this;
  }

  public ResponseCheckMultipleSchemaDataInnerConditions addRedeemableSkusItem(String redeemableSkusItem) {
    if (this.redeemableSkus == null) {
      this.redeemableSkus = new ArrayList<>();
    }
    this.redeemableSkus.add(redeemableSkusItem);
    return this;
  }

  /**
   * List of redeemable SKUs of the voucher code. For voucher type &#x3D; conditional, bill number must contain at least 1 redeemable SKU of the voucher.
   * @return redeemableSkus
   */
  @javax.annotation.Nullable
  public List<String> getRedeemableSkus() {
    return redeemableSkus;
  }

  public void setRedeemableSkus(@javax.annotation.Nullable List<String> redeemableSkus) {
    this.redeemableSkus = redeemableSkus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseCheckMultipleSchemaDataInnerConditions responseCheckMultipleSchemaDataInnerConditions = (ResponseCheckMultipleSchemaDataInnerConditions) o;
    return Objects.equals(this.startDate, responseCheckMultipleSchemaDataInnerConditions.startDate) &&
        Objects.equals(this.excludeSpecificDate, responseCheckMultipleSchemaDataInnerConditions.excludeSpecificDate) &&
        Objects.equals(this.excludeRecurringDay, responseCheckMultipleSchemaDataInnerConditions.excludeRecurringDay) &&
        Objects.equals(this.orderValue, responseCheckMultipleSchemaDataInnerConditions.orderValue) &&
        Objects.equals(this.redeemableSkus, responseCheckMultipleSchemaDataInnerConditions.redeemableSkus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, excludeSpecificDate, excludeRecurringDay, orderValue, redeemableSkus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseCheckMultipleSchemaDataInnerConditions {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    excludeSpecificDate: ").append(toIndentedString(excludeSpecificDate)).append("\n");
    sb.append("    excludeRecurringDay: ").append(toIndentedString(excludeRecurringDay)).append("\n");
    sb.append("    orderValue: ").append(toIndentedString(orderValue)).append("\n");
    sb.append("    redeemableSkus: ").append(toIndentedString(redeemableSkus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("start_date");
    openapiFields.add("exclude_specific_date");
    openapiFields.add("exclude_recurring_day");
    openapiFields.add("order_value");
    openapiFields.add("redeemable_skus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseCheckMultipleSchemaDataInnerConditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseCheckMultipleSchemaDataInnerConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseCheckMultipleSchemaDataInnerConditions is not found in the empty JSON string", ResponseCheckMultipleSchemaDataInnerConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseCheckMultipleSchemaDataInnerConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseCheckMultipleSchemaDataInnerConditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exclude_specific_date") != null && !jsonObj.get("exclude_specific_date").isJsonNull() && !jsonObj.get("exclude_specific_date").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude_specific_date` to be an array in the JSON string but got `%s`", jsonObj.get("exclude_specific_date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exclude_recurring_day") != null && !jsonObj.get("exclude_recurring_day").isJsonNull() && !jsonObj.get("exclude_recurring_day").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude_recurring_day` to be an array in the JSON string but got `%s`", jsonObj.get("exclude_recurring_day").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redeemable_skus") != null && !jsonObj.get("redeemable_skus").isJsonNull() && !jsonObj.get("redeemable_skus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redeemable_skus` to be an array in the JSON string but got `%s`", jsonObj.get("redeemable_skus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseCheckMultipleSchemaDataInnerConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseCheckMultipleSchemaDataInnerConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseCheckMultipleSchemaDataInnerConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseCheckMultipleSchemaDataInnerConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseCheckMultipleSchemaDataInnerConditions>() {
           @Override
           public void write(JsonWriter out, ResponseCheckMultipleSchemaDataInnerConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseCheckMultipleSchemaDataInnerConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseCheckMultipleSchemaDataInnerConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseCheckMultipleSchemaDataInnerConditions
   * @throws IOException if the JSON string is invalid with respect to ResponseCheckMultipleSchemaDataInnerConditions
   */
  public static ResponseCheckMultipleSchemaDataInnerConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseCheckMultipleSchemaDataInnerConditions.class);
  }

  /**
   * Convert an instance of ResponseCheckMultipleSchemaDataInnerConditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

