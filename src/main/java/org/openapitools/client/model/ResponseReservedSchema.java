/*
 * Merchant APIs
 * Technical document APIs for Merchant APIs
 *
 * The version of the OpenAPI document: 6.0
 * Contact: duong.vu@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResponseReservedSchemaDataInner;
import org.openapitools.client.model.ResponseReservedSchemaUsedStore;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResponseReservedSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-23T16:39:17.709679+07:00[Asia/Ho_Chi_Minh]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class ResponseReservedSchema {
  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  @javax.annotation.Nullable
  private Boolean success;

  public static final String SERIALIZED_NAME_RETURN_CODE = "return_code";
  @SerializedName(SERIALIZED_NAME_RETURN_CODE)
  @javax.annotation.Nullable
  private String returnCode;

  public static final String SERIALIZED_NAME_MESSAGE_EN = "message_en";
  @SerializedName(SERIALIZED_NAME_MESSAGE_EN)
  @javax.annotation.Nullable
  private String messageEn;

  public static final String SERIALIZED_NAME_MESSAGE_VI = "message_vi";
  @SerializedName(SERIALIZED_NAME_MESSAGE_VI)
  @javax.annotation.Nullable
  private String messageVi;

  public static final String SERIALIZED_NAME_USED_STORE = "used_store";
  @SerializedName(SERIALIZED_NAME_USED_STORE)
  @javax.annotation.Nullable
  private ResponseReservedSchemaUsedStore usedStore;

  public static final String SERIALIZED_NAME_BILL_NUMBER = "bill_number";
  @SerializedName(SERIALIZED_NAME_BILL_NUMBER)
  @javax.annotation.Nullable
  private String billNumber;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nullable
  private List<ResponseReservedSchemaDataInner> data = new ArrayList<>();

  public ResponseReservedSchema() {
  }

  public ResponseReservedSchema success(@javax.annotation.Nullable Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(@javax.annotation.Nullable Boolean success) {
    this.success = success;
  }


  public ResponseReservedSchema returnCode(@javax.annotation.Nullable String returnCode) {
    this.returnCode = returnCode;
    return this;
  }

  /**
   * Result code if failed. In case of successful request: value is null
   * @return returnCode
   */
  @javax.annotation.Nullable
  public String getReturnCode() {
    return returnCode;
  }

  public void setReturnCode(@javax.annotation.Nullable String returnCode) {
    this.returnCode = returnCode;
  }


  public ResponseReservedSchema messageEn(@javax.annotation.Nullable String messageEn) {
    this.messageEn = messageEn;
    return this;
  }

  /**
   * Message notification in English
   * @return messageEn
   */
  @javax.annotation.Nullable
  public String getMessageEn() {
    return messageEn;
  }

  public void setMessageEn(@javax.annotation.Nullable String messageEn) {
    this.messageEn = messageEn;
  }


  public ResponseReservedSchema messageVi(@javax.annotation.Nullable String messageVi) {
    this.messageVi = messageVi;
    return this;
  }

  /**
   * Message notification in Vietnamese
   * @return messageVi
   */
  @javax.annotation.Nullable
  public String getMessageVi() {
    return messageVi;
  }

  public void setMessageVi(@javax.annotation.Nullable String messageVi) {
    this.messageVi = messageVi;
  }


  public ResponseReservedSchema usedStore(@javax.annotation.Nullable ResponseReservedSchemaUsedStore usedStore) {
    this.usedStore = usedStore;
    return this;
  }

  /**
   * Get usedStore
   * @return usedStore
   */
  @javax.annotation.Nullable
  public ResponseReservedSchemaUsedStore getUsedStore() {
    return usedStore;
  }

  public void setUsedStore(@javax.annotation.Nullable ResponseReservedSchemaUsedStore usedStore) {
    this.usedStore = usedStore;
  }


  public ResponseReservedSchema billNumber(@javax.annotation.Nullable String billNumber) {
    this.billNumber = billNumber;
    return this;
  }

  /**
   * Bill number
   * @return billNumber
   */
  @javax.annotation.Nullable
  public String getBillNumber() {
    return billNumber;
  }

  public void setBillNumber(@javax.annotation.Nullable String billNumber) {
    this.billNumber = billNumber;
  }


  public ResponseReservedSchema data(@javax.annotation.Nullable List<ResponseReservedSchemaDataInner> data) {
    this.data = data;
    return this;
  }

  public ResponseReservedSchema addDataItem(ResponseReservedSchemaDataInner dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Detail items of voucher, if result is failed, response will return the first voucher code which is invalid
   * @return data
   */
  @javax.annotation.Nullable
  public List<ResponseReservedSchemaDataInner> getData() {
    return data;
  }

  public void setData(@javax.annotation.Nullable List<ResponseReservedSchemaDataInner> data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseReservedSchema responseReservedSchema = (ResponseReservedSchema) o;
    return Objects.equals(this.success, responseReservedSchema.success) &&
        Objects.equals(this.returnCode, responseReservedSchema.returnCode) &&
        Objects.equals(this.messageEn, responseReservedSchema.messageEn) &&
        Objects.equals(this.messageVi, responseReservedSchema.messageVi) &&
        Objects.equals(this.usedStore, responseReservedSchema.usedStore) &&
        Objects.equals(this.billNumber, responseReservedSchema.billNumber) &&
        Objects.equals(this.data, responseReservedSchema.data);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(success, returnCode, messageEn, messageVi, usedStore, billNumber, data);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseReservedSchema {\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    returnCode: ").append(toIndentedString(returnCode)).append("\n");
    sb.append("    messageEn: ").append(toIndentedString(messageEn)).append("\n");
    sb.append("    messageVi: ").append(toIndentedString(messageVi)).append("\n");
    sb.append("    usedStore: ").append(toIndentedString(usedStore)).append("\n");
    sb.append("    billNumber: ").append(toIndentedString(billNumber)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("success");
    openapiFields.add("return_code");
    openapiFields.add("message_en");
    openapiFields.add("message_vi");
    openapiFields.add("used_store");
    openapiFields.add("bill_number");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseReservedSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseReservedSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseReservedSchema is not found in the empty JSON string", ResponseReservedSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseReservedSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseReservedSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("return_code") != null && !jsonObj.get("return_code").isJsonNull()) && !jsonObj.get("return_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_code").toString()));
      }
      if ((jsonObj.get("message_en") != null && !jsonObj.get("message_en").isJsonNull()) && !jsonObj.get("message_en").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_en` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_en").toString()));
      }
      if ((jsonObj.get("message_vi") != null && !jsonObj.get("message_vi").isJsonNull()) && !jsonObj.get("message_vi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_vi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_vi").toString()));
      }
      // validate the optional field `used_store`
      if (jsonObj.get("used_store") != null && !jsonObj.get("used_store").isJsonNull()) {
        ResponseReservedSchemaUsedStore.validateJsonElement(jsonObj.get("used_store"));
      }
      if ((jsonObj.get("bill_number") != null && !jsonObj.get("bill_number").isJsonNull()) && !jsonObj.get("bill_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bill_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bill_number").toString()));
      }
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
        if (jsonArraydata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
          }

          // validate the optional field `data` (array)
          for (int i = 0; i < jsonArraydata.size(); i++) {
            ResponseReservedSchemaDataInner.validateJsonElement(jsonArraydata.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseReservedSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseReservedSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseReservedSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseReservedSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseReservedSchema>() {
           @Override
           public void write(JsonWriter out, ResponseReservedSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseReservedSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseReservedSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseReservedSchema
   * @throws IOException if the JSON string is invalid with respect to ResponseReservedSchema
   */
  public static ResponseReservedSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseReservedSchema.class);
  }

  /**
   * Convert an instance of ResponseReservedSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

