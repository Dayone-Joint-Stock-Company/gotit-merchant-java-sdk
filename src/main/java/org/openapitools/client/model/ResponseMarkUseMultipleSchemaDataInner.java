/*
 * Merchant APIs
 * Technical document APIs for Merchant APIs
 *
 * The version of the OpenAPI document: 6.0
 * Contact: duong.vu@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResponseMarkUseMultipleSchemaDataInnerConditions;
import org.openapitools.client.model.ResponseMarkUseMultipleSchemaDataInnerRedemptions;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResponseMarkUseMultipleSchemaDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-23T16:39:17.709679+07:00[Asia/Ho_Chi_Minh]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class ResponseMarkUseMultipleSchemaDataInner {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private Integer value;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  @javax.annotation.Nullable
  private Integer productId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private Integer state;

  public static final String SERIALIZED_NAME_VOUCHER_TYPE = "voucher_type";
  @SerializedName(SERIALIZED_NAME_VOUCHER_TYPE)
  @javax.annotation.Nullable
  private String voucherType;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  @javax.annotation.Nullable
  private ResponseMarkUseMultipleSchemaDataInnerConditions conditions;

  public static final String SERIALIZED_NAME_REDEMPTIONS = "redemptions";
  @SerializedName(SERIALIZED_NAME_REDEMPTIONS)
  @javax.annotation.Nullable
  private ResponseMarkUseMultipleSchemaDataInnerRedemptions redemptions;

  public ResponseMarkUseMultipleSchemaDataInner() {
  }

  public ResponseMarkUseMultipleSchemaDataInner code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Voucher code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public ResponseMarkUseMultipleSchemaDataInner value(@javax.annotation.Nullable Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Value of voucher
   * @return value
   */
  @javax.annotation.Nullable
  public Integer getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable Integer value) {
    this.value = value;
  }


  public ResponseMarkUseMultipleSchemaDataInner productId(@javax.annotation.Nullable Integer productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product ID
   * @return productId
   */
  @javax.annotation.Nullable
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(@javax.annotation.Nullable Integer productId) {
    this.productId = productId;
  }


  public ResponseMarkUseMultipleSchemaDataInner state(@javax.annotation.Nullable Integer state) {
    this.state = state;
    return this;
  }

  /**
   * State of voucher
   * @return state
   */
  @javax.annotation.Nullable
  public Integer getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable Integer state) {
    this.state = state;
  }


  public ResponseMarkUseMultipleSchemaDataInner voucherType(@javax.annotation.Nullable String voucherType) {
    this.voucherType = voucherType;
    return this;
  }

  /**
   * Voucher type, standard or conditional
   * @return voucherType
   */
  @javax.annotation.Nullable
  public String getVoucherType() {
    return voucherType;
  }

  public void setVoucherType(@javax.annotation.Nullable String voucherType) {
    this.voucherType = voucherType;
  }


  public ResponseMarkUseMultipleSchemaDataInner conditions(@javax.annotation.Nullable ResponseMarkUseMultipleSchemaDataInnerConditions conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public ResponseMarkUseMultipleSchemaDataInnerConditions getConditions() {
    return conditions;
  }

  public void setConditions(@javax.annotation.Nullable ResponseMarkUseMultipleSchemaDataInnerConditions conditions) {
    this.conditions = conditions;
  }


  public ResponseMarkUseMultipleSchemaDataInner redemptions(@javax.annotation.Nullable ResponseMarkUseMultipleSchemaDataInnerRedemptions redemptions) {
    this.redemptions = redemptions;
    return this;
  }

  /**
   * Get redemptions
   * @return redemptions
   */
  @javax.annotation.Nullable
  public ResponseMarkUseMultipleSchemaDataInnerRedemptions getRedemptions() {
    return redemptions;
  }

  public void setRedemptions(@javax.annotation.Nullable ResponseMarkUseMultipleSchemaDataInnerRedemptions redemptions) {
    this.redemptions = redemptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseMarkUseMultipleSchemaDataInner responseMarkUseMultipleSchemaDataInner = (ResponseMarkUseMultipleSchemaDataInner) o;
    return Objects.equals(this.code, responseMarkUseMultipleSchemaDataInner.code) &&
        Objects.equals(this.value, responseMarkUseMultipleSchemaDataInner.value) &&
        Objects.equals(this.productId, responseMarkUseMultipleSchemaDataInner.productId) &&
        Objects.equals(this.state, responseMarkUseMultipleSchemaDataInner.state) &&
        Objects.equals(this.voucherType, responseMarkUseMultipleSchemaDataInner.voucherType) &&
        Objects.equals(this.conditions, responseMarkUseMultipleSchemaDataInner.conditions) &&
        Objects.equals(this.redemptions, responseMarkUseMultipleSchemaDataInner.redemptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, value, productId, state, voucherType, conditions, redemptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseMarkUseMultipleSchemaDataInner {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    voucherType: ").append(toIndentedString(voucherType)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    redemptions: ").append(toIndentedString(redemptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("value");
    openapiFields.add("product_id");
    openapiFields.add("state");
    openapiFields.add("voucher_type");
    openapiFields.add("conditions");
    openapiFields.add("redemptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseMarkUseMultipleSchemaDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseMarkUseMultipleSchemaDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseMarkUseMultipleSchemaDataInner is not found in the empty JSON string", ResponseMarkUseMultipleSchemaDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseMarkUseMultipleSchemaDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseMarkUseMultipleSchemaDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("voucher_type") != null && !jsonObj.get("voucher_type").isJsonNull()) && !jsonObj.get("voucher_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voucher_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voucher_type").toString()));
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        ResponseMarkUseMultipleSchemaDataInnerConditions.validateJsonElement(jsonObj.get("conditions"));
      }
      // validate the optional field `redemptions`
      if (jsonObj.get("redemptions") != null && !jsonObj.get("redemptions").isJsonNull()) {
        ResponseMarkUseMultipleSchemaDataInnerRedemptions.validateJsonElement(jsonObj.get("redemptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseMarkUseMultipleSchemaDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseMarkUseMultipleSchemaDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseMarkUseMultipleSchemaDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseMarkUseMultipleSchemaDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseMarkUseMultipleSchemaDataInner>() {
           @Override
           public void write(JsonWriter out, ResponseMarkUseMultipleSchemaDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseMarkUseMultipleSchemaDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseMarkUseMultipleSchemaDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseMarkUseMultipleSchemaDataInner
   * @throws IOException if the JSON string is invalid with respect to ResponseMarkUseMultipleSchemaDataInner
   */
  public static ResponseMarkUseMultipleSchemaDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseMarkUseMultipleSchemaDataInner.class);
  }

  /**
   * Convert an instance of ResponseMarkUseMultipleSchemaDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

