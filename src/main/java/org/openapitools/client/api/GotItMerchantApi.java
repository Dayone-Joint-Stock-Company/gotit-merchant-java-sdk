/*
 * Merchant APIs
 * Technical document APIs for Merchant APIs
 *
 * The version of the OpenAPI document: 6.0
 * Contact: duong.vu@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RequestCheckMultipleBodySchema;
import org.openapitools.client.model.RequestMarkUseMultipleBodySchema;
import org.openapitools.client.model.RequestReservedBodySchema;
import org.openapitools.client.model.RequestUnReservedBodySchema;
import org.openapitools.client.model.ResponseCheckMultipleSchema;
import org.openapitools.client.model.ResponseMarkUseMultipleSchema;
import org.openapitools.client.model.ResponseReservedSchema;
import org.openapitools.client.model.ResponseUnReservedSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GotItMerchantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GotItMerchantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GotItMerchantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkMultiple
     * @param requestCheckMultipleBodySchema  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkMultipleCall(RequestCheckMultipleBodySchema requestCheckMultipleBodySchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestCheckMultipleBodySchema;

        // create path and map variables
        String localVarPath = "/api/v6.0/checkmultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkMultipleValidateBeforeCall(RequestCheckMultipleBodySchema requestCheckMultipleBodySchema, final ApiCallback _callback) throws ApiException {
        return checkMultipleCall(requestCheckMultipleBodySchema, _callback);

    }

    /**
     * Check multiple vouchers are valid or not
     * Check multiple vouchers are valid or not
     * @param requestCheckMultipleBodySchema  (optional)
     * @return ResponseCheckMultipleSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseCheckMultipleSchema checkMultiple(RequestCheckMultipleBodySchema requestCheckMultipleBodySchema) throws ApiException {
        ApiResponse<ResponseCheckMultipleSchema> localVarResp = checkMultipleWithHttpInfo(requestCheckMultipleBodySchema);
        return localVarResp.getData();
    }

    /**
     * Check multiple vouchers are valid or not
     * Check multiple vouchers are valid or not
     * @param requestCheckMultipleBodySchema  (optional)
     * @return ApiResponse&lt;ResponseCheckMultipleSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseCheckMultipleSchema> checkMultipleWithHttpInfo(RequestCheckMultipleBodySchema requestCheckMultipleBodySchema) throws ApiException {
        okhttp3.Call localVarCall = checkMultipleValidateBeforeCall(requestCheckMultipleBodySchema, null);
        Type localVarReturnType = new TypeToken<ResponseCheckMultipleSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check multiple vouchers are valid or not (asynchronously)
     * Check multiple vouchers are valid or not
     * @param requestCheckMultipleBodySchema  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkMultipleAsync(RequestCheckMultipleBodySchema requestCheckMultipleBodySchema, final ApiCallback<ResponseCheckMultipleSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkMultipleValidateBeforeCall(requestCheckMultipleBodySchema, _callback);
        Type localVarReturnType = new TypeToken<ResponseCheckMultipleSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reserved
     * @param requestReservedBodySchema  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservedCall(RequestReservedBodySchema requestReservedBodySchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestReservedBodySchema;

        // create path and map variables
        String localVarPath = "/api/v6.0/reserved";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservedValidateBeforeCall(RequestReservedBodySchema requestReservedBodySchema, final ApiCallback _callback) throws ApiException {
        return reservedCall(requestReservedBodySchema, _callback);

    }

    /**
     * Reserved multiple vouchers for a fixed bill number.
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestReservedBodySchema  (optional)
     * @return ResponseReservedSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseReservedSchema reserved(RequestReservedBodySchema requestReservedBodySchema) throws ApiException {
        ApiResponse<ResponseReservedSchema> localVarResp = reservedWithHttpInfo(requestReservedBodySchema);
        return localVarResp.getData();
    }

    /**
     * Reserved multiple vouchers for a fixed bill number.
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestReservedBodySchema  (optional)
     * @return ApiResponse&lt;ResponseReservedSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseReservedSchema> reservedWithHttpInfo(RequestReservedBodySchema requestReservedBodySchema) throws ApiException {
        okhttp3.Call localVarCall = reservedValidateBeforeCall(requestReservedBodySchema, null);
        Type localVarReturnType = new TypeToken<ResponseReservedSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reserved multiple vouchers for a fixed bill number. (asynchronously)
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestReservedBodySchema  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservedAsync(RequestReservedBodySchema requestReservedBodySchema, final ApiCallback<ResponseReservedSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservedValidateBeforeCall(requestReservedBodySchema, _callback);
        Type localVarReturnType = new TypeToken<ResponseReservedSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unreserved
     * @param requestUnReservedBodySchema  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unreservedCall(RequestUnReservedBodySchema requestUnReservedBodySchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestUnReservedBodySchema;

        // create path and map variables
        String localVarPath = "/api/v6.0/unreserved";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unreservedValidateBeforeCall(RequestUnReservedBodySchema requestUnReservedBodySchema, final ApiCallback _callback) throws ApiException {
        return unreservedCall(requestUnReservedBodySchema, _callback);

    }

    /**
     * Reserved multiple vouchers for a fixed bill number.
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestUnReservedBodySchema  (optional)
     * @return ResponseUnReservedSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseUnReservedSchema unreserved(RequestUnReservedBodySchema requestUnReservedBodySchema) throws ApiException {
        ApiResponse<ResponseUnReservedSchema> localVarResp = unreservedWithHttpInfo(requestUnReservedBodySchema);
        return localVarResp.getData();
    }

    /**
     * Reserved multiple vouchers for a fixed bill number.
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestUnReservedBodySchema  (optional)
     * @return ApiResponse&lt;ResponseUnReservedSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseUnReservedSchema> unreservedWithHttpInfo(RequestUnReservedBodySchema requestUnReservedBodySchema) throws ApiException {
        okhttp3.Call localVarCall = unreservedValidateBeforeCall(requestUnReservedBodySchema, null);
        Type localVarReturnType = new TypeToken<ResponseUnReservedSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reserved multiple vouchers for a fixed bill number. (asynchronously)
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestUnReservedBodySchema  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unreservedAsync(RequestUnReservedBodySchema requestUnReservedBodySchema, final ApiCallback<ResponseUnReservedSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = unreservedValidateBeforeCall(requestUnReservedBodySchema, _callback);
        Type localVarReturnType = new TypeToken<ResponseUnReservedSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for useMultiple
     * @param requestMarkUseMultipleBodySchema  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useMultipleCall(RequestMarkUseMultipleBodySchema requestMarkUseMultipleBodySchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestMarkUseMultipleBodySchema;

        // create path and map variables
        String localVarPath = "/api/v6.0/usemultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call useMultipleValidateBeforeCall(RequestMarkUseMultipleBodySchema requestMarkUseMultipleBodySchema, final ApiCallback _callback) throws ApiException {
        return useMultipleCall(requestMarkUseMultipleBodySchema, _callback);

    }

    /**
     * Reserved multiple vouchers for a fixed bill number.
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestMarkUseMultipleBodySchema  (optional)
     * @return ResponseMarkUseMultipleSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseMarkUseMultipleSchema useMultiple(RequestMarkUseMultipleBodySchema requestMarkUseMultipleBodySchema) throws ApiException {
        ApiResponse<ResponseMarkUseMultipleSchema> localVarResp = useMultipleWithHttpInfo(requestMarkUseMultipleBodySchema);
        return localVarResp.getData();
    }

    /**
     * Reserved multiple vouchers for a fixed bill number.
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestMarkUseMultipleBodySchema  (optional)
     * @return ApiResponse&lt;ResponseMarkUseMultipleSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseMarkUseMultipleSchema> useMultipleWithHttpInfo(RequestMarkUseMultipleBodySchema requestMarkUseMultipleBodySchema) throws ApiException {
        okhttp3.Call localVarCall = useMultipleValidateBeforeCall(requestMarkUseMultipleBodySchema, null);
        Type localVarReturnType = new TypeToken<ResponseMarkUseMultipleSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reserved multiple vouchers for a fixed bill number. (asynchronously)
     * Reserved multiple vouchers for a fixed bill number.
     * @param requestMarkUseMultipleBodySchema  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was received and processed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useMultipleAsync(RequestMarkUseMultipleBodySchema requestMarkUseMultipleBodySchema, final ApiCallback<ResponseMarkUseMultipleSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = useMultipleValidateBeforeCall(requestMarkUseMultipleBodySchema, _callback);
        Type localVarReturnType = new TypeToken<ResponseMarkUseMultipleSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
